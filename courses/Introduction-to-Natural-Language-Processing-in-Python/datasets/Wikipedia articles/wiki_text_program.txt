{{for|the TV programme|The Computer Programme}}
File:Hello world c.svg|thumb|300px|C (programming language)|C-language "Hello, World" source code. This first known "Hello, world" Snippet (programming)|snippet from the seminal book ''The C Programming Language (book)|The C Programming Language'' originates from Brian Kernighan and Dennis Ritchie in 1974.

A '''computer program''' is a collection of instruction set|instructions<ref name="aup-ch4-p132">{{cite book
  | last = Rochkind
  | first = Marc J.
  | title = Advanced Unix Programming, Second Edition
  | publisher = Addison-Wesley
  | year = 2004
  | page = 1.1.2
}} that performs a specific task when execution (computing)|executed by a computer. A computer requires programs to function and typically executes the program's instructions in a central processing unit.<ref name="osc-ch3-p58">{{cite book
  | last = Silberschatz
  | first = Abraham
  | title = Operating System Concepts, Fourth Edition
  | publisher = Addison-Wesley
  | year = 1994
  | page = 59
  | isbn = 0-201-50480-4
}}

A computer program is usually written by a computer programmer in a programming language. From the program in its human-readable form of source code, a compiler can derive machine code—a form consisting of instructions that the computer can directly execute. Alternatively, a computer program may be executed with the aid of an interpreter (computing)|interpreter.

A part of a computer program that performs a well-defined task is known as an algorithm. A collection of computer programs, Library (computing)|libraries, and related Data (computing)|data are referred to as software. Computer programs may be categorized along functional lines, such as application software or system software.

==History==
{{See also|History of computing|History of programming languages|History of software}}

===Early programmable machines===
The earliest programmable machines preceded the History of computing hardware|invention of the digital computer. In 1801, Joseph-Marie Jacquard devised a Jacquard loom|loom that would weave a pattern by following a series of perforated cards. Patterns could be weaved and repeated by arranging the cards.<ref name="eniac-ch1-p16">{{cite book
  | last = McCartney
  | first = Scott
  | title = ENIAC – The Triumphs and Tragedies of the World's First Computer
  | publisher = Walker and Company
  | year = 1999
  | page = 16
  | isbn = 0-8027-1348-3
}}

===Analytical Engine===
File:Diagram for the computation of Bernoulli numbers.jpg|thumb|right|Lovelace's diagram from Note G, the Ada Lovelace#First computer program|first published computer algorithm 
In 1837, Charles Babbage was inspired by Jacquard's loom to attempt to build the Analytical Engine.<ref name="eniac-ch1-p16"/>
The names of the components of the calculating device were borrowed from the textile industry. In the textile industry, yarn was brought from the store to be milled. The device would have had a "store"—memory to hold 1,000 numbers of 40 decimal digits each.  Numbers from the "store" would then have then been transferred to the "mill" (analogous to the CPU of a modern machine), for processing. It was programmed using two sets of perforated cards—one to direct the operation and the other for the input variables.<ref name="eniac-ch1-p16"/>
<ref>{{cite journal
  | first = Allan G.
  | last = Bromley
  | authorlink = Allan G. Bromley
  | year = 1998
  | url = http://profs.scienze.univr.it/~manca/storia-informatica/babbage.pdf
  | title = Charles Babbage’s Analytical Engine, 1838
  | journal = IEEE Annals of the History of Computing
  | volume = 20
  | number = 4
}} However, after more than 17,000 pounds of the British government's money, the thousands of cogged wheels and gears never fully worked together.<ref name="sco-ch1-p15">{{cite book
  | last = Tanenbaum
  | first = Andrew S.
  | title = Structured Computer Organization, Third Edition
  | publisher = Prentice Hall
  | year = 1990
  | page = 15
  | isbn = 0-13-854662-2
}}

During a nine-month period in 1842–43, Ada Lovelace translated the memoir of Italian mathematician Luigi Menabrea. The memoir covered the Analytical Engine. The translation contained Note G which completely detailed a method for calculating Bernoulli numbers using the Analytical Engine. This note is recognized by some historians as the world's first written computer program.<ref>{{citation|author1 = J. Fuegi |author2 =J. Francis| title = Lovelace & Babbage and the creation of the 1843 'notes'|journal = Annals of the History of Computing| volume = 25| issue = 4|date=October–December 2003| doi = 10.1109/MAHC.2003.1253887| pages = 16, 19, 25}}

===Universal Turing machine===
In 1936, Alan Turing introduced the Universal Turing machine—a theoretical device that can model every computation that can be performed on a Turing complete computing machine.<ref name="discrete-ch10-p654">{{cite book
  | last = Rosen
  | first = Kenneth H.
  | title = Discrete Mathematics and Its Applications
  | publisher = McGraw-Hill, Inc.
  | year = 1991
  | page = 654
  | isbn = 0-07-053744-5
}}
It is a finite-state machine that has an infinitely long read/write tape. The machine can move the tape back and forth, changing its contents as it performs an algorithm. The machine starts in the initial state, goes through a sequence of steps, and halts when it encounters the halt state.<ref name="formal_languages-ch9-p234">{{cite book
  | last = Linz
  | first = Peter
  | title = An Introduction to Formal Languages and Automata
  | publisher = D. C. Heath and Company
  | year = 1990
  | page = 234
  | isbn = 0-669-17342-8
}}
This machine is considered by some to be the origin of the stored-program computer—used by John von Neumann (1946) for the "Electronic Computing Instrument" that now bears the von Neumann architecture name.<ref>{{Citation
  | first = Martin | last = Davis | author-link = Martin Davis
  | title = Engines of Logic: Mathematicians and the origin of the Computer
  | edition = 1st
  | year = 2000
  | place = New York NY
  | publisher = W. W. Norton & Company
  | id =  (pb.)
  | isbn = 0-393-32229-7}}

===Early programmable computers===
The Z3 (computer)|Z3 computer, invented by Konrad Zuse (1941) in Germany, was a digital and programmable computer.<ref name="hoc-zuse">{{cite web
  | url = http://history-computer.com/ModernComputer/Relays/Zuse.html
  | title = History of Computing
}} A digital computer uses electricity as the calculating component. The Z3 contained 2,400 relays to create the Electronic circuit|circuits. The circuits provided a Binary code|binary, floating-point, nine-instruction computer. Programming the Z3 was through a specially designed keyboard and punched tape.

The ENIAC|Electronic Numerical Integrator And Computer (Fall 1945) was a Turing complete, general-purpose computer that used 17,468 vacuum tubes to create the Electronic circuit|circuits. At its core, it was a series of Pascalines wired together.<ref name="eniac-ch5-p102">{{cite book
  | last = McCartney
  | first = Scott
  | title = ENIAC – The Triumphs and Tragedies of the World's First Computer
  | publisher = Walker and Company
  | year = 1999
  | page = 102
  | isbn = 0-8027-1348-3
}} Its 40 units weighed 30 tons, occupied {{convert|1,800|sqft|m2|0}}, and consumed $650 per hour (Inflation|in 1940s currency) in electricity when idle.<ref name="eniac-ch5-p102"/> It had 20 base-10 Accumulator (computing)|accumulators. Programming the ENIAC took up to two months.<ref name="eniac-ch5-p102"/> Three function tables were on wheels and needed to be rolled to fixed function panels. Function tables were connected to function panels using heavy black cables. Each function table had 728 rotating knobs. Programming the ENIAC also involved setting some of the 3,000 switches. Debugging a program took a week.<ref name="eniac-ch5-p102"/> The ENIAC featured Parallel computing|parallel operations. Different sets of accumulators could simultaneously work on different algorithms. It used Punched card|punched card machines for input and output, and it was controlled with a clock signal. It ran for eight years, calculating hydrogen bomb parameters, predicting weather patterns, and producing firing tables to aim artillery guns.

The Manchester Small-Scale Experimental Machine (June 1948) was a stored-program computer.<ref>{{citation |last=Enticknap |first=Nicholas |title=Computing's Golden Jubilee |journal=Resurrection |issue=20 |publisher=The Computer Conservation Society |date=Summer 1998 |url=http://www.cs.man.ac.uk/CCS/res/res20.htm#d |issn=0958-7403 |accessdate=19 April 2008}} Programming transitioned away from moving cables and setting dials; instead, a computer program was stored in memory as numbers. Only three bits of memory were available to store each instruction, so it was limited to eight instructions. 32 switches were available for programming.

===Later computers===
File:Dg-nova3.jpg|thumb|Switches for manual input on a Data General Nova 3, manufactured in the mid-1970s
Computers manufactured until the 1970s had front-panel switches for programming. The computer program was written on paper for reference. An instruction was represented by a configuration of on/off settings. After setting the configuration, an execute button was pressed. This process was then repeated. Computer programs also were manually input via paper tape or punched cards. After the medium was loaded, the starting address was set via switches and the execute button pressed.<ref name="osc-ch1-p6">{{cite book
  | last = Silberschatz
  | first = Abraham
  | title = Operating System Concepts, Fourth Edition
  | publisher = Addison-Wesley
  | year = 1994
  | page = 6
  | isbn = 0-201-50480-4
}}

In 1961, the Burroughs large systems#B5000|Burroughs B5000 was built specifically to be programmed in the ALGOL 60 language. The hardware featured circuits to ease the compiler|compile phase.<ref name="sco-ch1-p20">{{cite book
  | last = Tanenbaum
  | first = Andrew S.
  | title = Structured Computer Organization, Third Edition
  | publisher = Prentice Hall
  | year = 1990
  | page = 20
  | isbn = 0-13-854662-2
}}

In 1964, the IBM System/360 was a line of six computers each having the same instruction set|instruction set architecture. The Model 30 was the smallest and least expensive. Customers could upgrade and retain the same application software.<ref name="sco-ch1-p21">{{cite book
  | last = Tanenbaum
  | first = Andrew S.
  | title = Structured Computer Organization, Third Edition
  | publisher = Prentice Hall
  | year = 1990
  | page = 21
  | isbn = 0-13-854662-2
}} Each System/360 model featured Computer multitasking#Multiprogramming|multiprogramming. With operating system support, multiple programs could be in memory at once. When one was waiting for input/output, another could compute. Each model also could emulator|emulate other computers. Customers could upgrade to the System/360 and retain their IBM 7090#IBM 7094|IBM 7094 or IBM 1401 application software.<ref name="sco-ch1-p21"/>

==Computer programming==
{{Main|Computer programming}}

Computer programming is the process of writing or editing source code. Editing source code involves testing, analyzing, refining, and sometimes coordinating with other programmers on a jointly developed program. A person who practices this skill is referred to as a computer programmer, software developer, and sometimes coder.

The sometimes lengthy process of computer programming is usually referred to as software development. The term software engineering is becoming popular as the process is seen as an engineering discipline.

===Programming languages===
{{main|Programming language}}
File:Object-Oriented-Programming-Methods-And-Classes-with-Inheritance.png|thumb|A computer program written in the imperative programming style

Computer programs can be categorized by the programming language programming paradigm|paradigm used to produce them. Two of the main paradigms are imperative programming|imperative and declarative language|declarative.

====Imperative languages====
''Imperative programming languages'' specify a sequential algorithm#Computer algorithm|algorithm using declarations, expressions, and statements:<ref name="cpl-ch4-75">{{cite book
  | last = Wilson
  | first = Leslie B.
  | title = Comparative Programming Languages, Second Edition
  | publisher = Addison-Wesley
  | year = 1993
  | page = 75
  | isbn = 0-201-56885-3
}}

 A ''declaration'' couples a variable (programming)|variable name to a datatype – for example: <code> var x: integer; </code>
 An ''expression'' yields a value – for example: <code> 2 + 2 </code> yields 4
 A ''statement'' might assign an expression to a variable or use the value of a variable to alter the program's control flow – for example: <code>x := 2 + 2; if x = 4 then do_something();</code>

One criticism of imperative languages is the side effect of an assignment statement on a class of variables called non-local variables.<ref name="cpl-ch9-213" />

====Declarative languages====
''Declarative programming languages'' describe ''what'' computation should be performed and not ''how'' to compute it. Declarative programs omit the control flow and are considered ''sets'' of instructions. Two broad categories of declarative languages are functional languages and logical languages. The principle behind functional languages (like Haskell (programming language)|Haskell) is to not allow side effect (computer science)|side effects, which makes it easier to reason about programs like mathematical functions.<ref name="cpl-ch9-213">{{cite book
  | last = Wilson
  | first = Leslie B.
  | title = Comparative Programming Languages, Second Edition
  | publisher = Addison-Wesley
  | year = 1993
  | page = 213
  | isbn = 0-201-56885-3
}} The principle behind logical languages (like Prolog) is to define the problem to be solved&nbsp;– the goal&nbsp;– and leave the detailed solution to the Prolog system itself.<ref name="cpl-ch10-244">{{cite book
  | last = Wilson
  | first = Leslie B.
  | title = Comparative   Programming Languages, Second Edition
  | publisher = Addison-Wesley
  | year = 1993
  | page = 244
  | isbn = 0-201-56885-3
}} The goal is defined by providing a list of subgoals. Then each subgoal is defined by further providing a list of its subgoals, etc. If a path of subgoals fails to find a solution, then that subgoal is backtracking|backtracked and another path is systematically attempted.

===Compilation and interpretation===
A computer program in the form of a human-readable, computer programming language is called source code. Source code may be converted into an Executable file|executable image by a compiler or execution (computing)|executed immediately with the aid of an Interpreter (computing)|interpreter.

Compilers are used to translate source code from a programming language into either Object file|object code or machine code.<ref>{{cite web|title=What is a Compiler?|url=http://lambda.uta.edu/cse5317/notes/node3.html|accessdate=2012-01-10}}  Object code needs further processing to become machine code, and machine code consists of the central processing unit|central processing unit's native instructions, ready for execution. Compiled computer programs are commonly referred to as executables, binary images, or simply as Binary file|binaries&nbsp;– a reference to the Binary numeral system|binary file format used to store the executable code.

Interpreters are used to execute source code from a programming language line-by-line. The interpreter Parsing|decodes each Statement (computer science)|statement and performs its behavior. One advantage of interpreters is that they can easily be extended to an REPL|interactive session. The programmer is presented with a prompt, and individual lines of code are typed in and performed immediately.

The main disadvantage of interpreters is computer programs run slower than when compiled. Interpreting code is slower because the interpreter must decode each statement and then perform it. However, software development may be faster using an interpreter because testing is immediate when the compiling step is omitted. Another disadvantage of interpreters is an interpreter must be present on the executing computer. By contrast, compiled computer programs need no compiler present during execution.

just-in-time compilation|Just in time compilers pre-compile computer programs just before execution. For example, the Java virtual machine#Process virtual machines|virtual machine Hotspot contains a Just In Time Compiler which selectively compiles Java bytecode into machine code - but only code which Hotspot predicts is likely to be used many times.

Either compiled or interpreted programs might be executed in a batch processing|batch process without human interaction.

Scripting languages are often used to create batch processes. One common scripting language is Unix shell, and its executing environment is called the command-line interface.

No properties of a programming language require it to be exclusively compiled or exclusively interpreted. The categorization usually reflects the most popular method of language execution. For example, Java is thought of as an interpreted language and C a compiled language, despite the existence of Java compilers and C interpreters.

==Storage and execution==
File:Papertape3.jpg|thumb|In the 1950s, computer programs were stored on Punched tape|perforated paper tape 

Typically, computer programs are stored in non-volatile memory until requested either directly or indirectly to be execution (computing)|executed by the computer user. Upon such a request, the program is loaded into random-access memory, by a computer program called an operating system, where it can be accessed directly by the central processor. The central processor then executes ("runs") the program, instruction by instruction, until termination. A program in execution is called a process (computing)|process.<ref name="osc-ch4-97">{{cite book
  | last = Silberschatz
  | first = Abraham
  | title = Operating System Concepts, Fourth Edition
  | publisher = Addison-Wesley
  | year = 1994
  | page = 97
  | isbn = 0-201-50480-4
}} Termination is either by normal self-termination or by error&nbsp;– software or hardware error.

===Simultaneous execution===
{{See also|Process (computing)|Multiprocessing}}

Many operating systems support computer multitasking|multitasking which enables many computer programs to appear to run simultaneously on one computer.  Operating systems may run multiple programs through process scheduling&nbsp;– a software mechanism to context switch|switch the Central processing unit|CPU among processes often so users can time-sharing|interact with each program while it runs.<ref name="osc-ch4-100">{{cite book
  | last = Silberschatz
  | first = Abraham
  | title = Operating System Concepts, Fourth Edition
  | publisher = Addison-Wesley
  | year = 1994
  | page = 100
  | isbn = 0-201-50480-4
}} Within hardware, modern day multiprocessor computers or computers with multicore processors may run multiple programs.<ref name="mcore">{{cite book
  | last = Akhter
  | first = Shameem
  | title = Multi-Core Programming
  | publisher = Richard Bowles (Intel Press)
  | year = 2006
  | pages = 11–13
  | isbn = 0-9764832-4-6
}}

Multiple lines of the same computer program may be simultaneously executed using thread (computing)|threads. Multithreading (computer architecture)|Multithreading processors are optimized to execute multiple threads efficiently.

===Self-modifying programs===
{{Main|Self-modifying code}}

A computer program in execution (computing)|execution is normally treated as being different from the Data (computing)|data the program operates on. However, in some cases, this distinction is blurred when a computer program modifies itself. The modified computer program is subsequently executed as part of the same program. Self-modifying code is possible for programs written in machine code, assembly language, Lisp (programming language)|Lisp, C (programming language)|C, COBOL, PL/1, and Prolog.

==Functional categories==
Computer programs may be categorized along functional lines. The main functional categories are application software and system software. System software includes the operating system which couples computer hardware with application software.<ref name="osc-overview"/> The purpose of the operating system is to provide an environment in which application software executes in a convenient and efficient manner.<ref name="osc-overview">{{cite book
  | last = Silberschatz
  | first = Abraham
  | title = Operating System Concepts, Fourth Edition
  | publisher = Addison-Wesley
  | year = 1994
  | page = 1
  | isbn = 0-201-50480-4
}} In addition to the operating system, system software includes Firmware|embedded programs, Booting|boot programs, and Microcode|micro programs. Application software designed for end users have a Interface (computing)|user interface. Application software not designed for the end user includes middleware, which couples one application with another. Application software also includes Utility software|utility programs. The distinction between system software and application software is under debate.

===Application software===
{{Main|Application software}}
File:Gcalctool-scientific.png|thumb|Example of an app: GCalctool, a software calculator

There are many types of application software:

 The word '''app''' came to being in 21st century. It is a Clipping (morphology)|clipping of the word "application". They have been designed for many platforms, but the word was first used for smaller mobile apps. Desktop apps are traditional computer programs that run on desktop computers. Mobile apps run on mobile devices. Web apps run inside a web browser. Both mobile and desktop apps may be downloaded from the developers' website or purchased from app stores such as Windows Store, Apple App Store, Mac App Store, Google Play or Intel AppUp.
 An '''application suite''' consists of multiple applications bundled together. Examples include Microsoft Office, LibreOffice, and iWork. They bundle a word processor, spreadsheet, and other applications.
 '''Enterprise software|Enterprise applications''' bundle accounting, personnel, customer, and vendor applications. Examples include enterprise resource planning, customer relationship management, and supply chain management software.
 '''Enterprise infrastructure software''' supports the enterprise's software systems. Examples include databases, email servers, and network servers.
 '''Information worker software''' are designed for workers at the departmental level. Examples include time management, schedule (workplace)|resource management, analytical, collaborative and documentation tools. Word processors, spreadsheets, email and blog clients, personal information system, and individual media editors may aid in multiple information worker tasks.
 '''Media development software''' generates print and electronic media for others to consume, most often in a commercial or educational setting. These produce graphics, publications, animations, and videos.
 '''Product engineering software''' is used to help develop large machines and other application software. Examples includes computer-aided design (CAD), computer-aided engineering (CAE), and integrated development environments.
 '''Entertainment Software''' can refer to video games, movie recorders and players, and music recorders and players.

===Utility programs===
Utility software|Utility programs are application programs designed to aid system administrators and computer programmers.

===Operating system===
{{See also|Operating system}}

An operating system is a computer program that acts as an intermediary between a user of a computer and the computer hardware.
<ref name="osc-overview"/>

In the 1950s, the programmer, who was also the operator, would write a program and run it.<ref name="osc-ch1-p6"/>
After the program finished executing, the output may have been printed, or it may have been punched onto paper tape or cards for later processing.<ref name="osc-ch1-p6"/>
More often than not the program did not work.
<ref name="sco-ch1-p11">{{cite book
  | last = Tanenbaum
  | first = Andrew S.
  | title = Structured Computer Organization, Third Edition
  | publisher = Prentice Hall
  | year = 1990
  | page = 11
  | isbn = 0-13-854662-2
}}
The programmer then looked at the console lights and fiddled with the console switches. If less fortunate, a memory printout was made for further study.<ref name="sco-ch1-p11"/>
In the 1960s, programmers reduced the amount of wasted time by automating the operator's job.<ref name="sco-ch1-p11"/> A program called an ''operating system'' was kept in the computer at all times.<ref name="sco-ch1-p11"/>

Originally, operating systems were programmed in assembly language|assembly; however, modern operating systems are typically written in C (programming language)|C.

===Boot program===
A stored-program computer requires an initial computer program stored in its read-only memory to booting|boot. The boot process is to identify and initialize all aspects of the system, from processor registers to device driver|device controllers to volatile memory|memory contents.<ref name="osc-ch2-p30">{{cite book
  | last = Silberschatz
  | first = Abraham
  | title = Operating System Concepts, Fourth Edition
  | publisher = Addison-Wesley
  | year = 1994
  | page = 30
  | isbn = 0-201-50480-4
}} Following the initialization process, this initial computer program loads the operating system and sets the program counter to begin normal operations.

===Embedded programs===
File:USB flash drive.JPG|thumb|230px|right|The microcontroller on the right of this USB flash drive is controlled with embedded firmware.

Independent of the host computer, a Peripheral|hardware device might have embedded firmware to control its operation. Firmware is used when the computer program is rarely or never expected to change, or when the program must not be lost when the power is off.<ref name="sco-ch1-p11"/>

===Microcode programs===
{{main|Microcode}}

Microcode programs control some central processing units and some other hardware. This code moves data between the Processor register|registers, Bus (computing)|buses, arithmetic logic units, and other functional units in the CPU.  Unlike conventional programs, microcode is not usually written by, or even visible to, the end users of systems, and is usually provided by the manufacturer, and is considered internal to the device.

==See also==
 Automatic programming
 Killer application
 Software bug

==References==
{{reflist|30em}}

==Further reading==
{{cite book
  | last = Knuth
  | first = Donald E.
  | title = The Art of Computer Programming, Volume 1, 3rd Edition
  | year = 1997
  | publisher = Addison-Wesley
  | location = Boston
  | isbn = 0-201-89683-4
}}
{{cite book
 |last=Knuth
 |first=Donald E.
 |title=The Art of Computer Programming, Volume 2, 3rd Edition
 |year=1997
 |publisher=Addison-Wesley
 |location = Boston
 |isbn=0-201-89684-2
}}
{{cite book
 |last=Knuth
 |first=Donald E.
 |title=The Art of Computer Programming, Volume 3, 3rd Edition
 |year=1997
 |publisher=Addison-Wesley
 |location = Boston
 |isbn=0-201-89685-0
}}

{{Authority control}}

{{DEFAULTSORT:Computer Program}}
Category:Computer programming
Category:Articles with example Java code
Category:Articles with example C code
Category:Articles with example C Sharp code
Category:Software

