In computer science, a '''high-level programming language''' is a programming language with strong Abstraction (computer science)|abstraction from the details of the computer. In comparison to low-level programming languages, it may use natural language elements, be easier to use, or may automate (or even hide entirely) significant areas of computing systems (e.g. memory management), making the process of developing a program simpler and more understandable relative to a lower-level language. The amount of abstraction provided defines how "high-level" a programming language is.[https://web.archive.org/web/20070826224349/http://www.ittc.ku.edu/hybridthreads/glossary/index.php HThreads - RD Glossary<!-- Bot generated title -->]

In the 1960s, high-level programming languages using a compiler were commonly called '''autocodes'''.<ref name=kleith>{{cite book|last=London|first=Keith|title=Introduction to Computers|year=1968|publisher=Faber and Faber Limited|location=24 Russell Square London WC1|isbn=0571085938|page=184|chapter=4, Programming|quote=The 'high' level programming languages are often called autocodes and the processor program, a compiler.}}<!--the book does not have an ISBN number, instead it has an SBN number. There is no typo in the previous sentence.-->
Examples of autocodes are COBOL and Fortran.<ref name=kleith2>{{cite book|last=London|first=Keith|title=Introduction to Computers|year=1968|publisher=Faber and Faber Limited|location=24 Russell Square London WC1|isbn=0571085938|page=186|chapter=4, Programming|quote=Two high level programming languages which can be used here as examples to illustrate the structure and purpose of autocodes are COBOL (Common Business Oriented Language) and FORTRAN (Formular Translation).}}<!--the book does not have an ISBN number, instead it has an SBN number. There is no typo in the previous sentence.-->

The first high-level programming language designed for computers was Plankalkül, created by Konrad Zuse.Giloi, Wolfgang, K. (1997). "Konrad Zuse's Plankalkül: The First High-Level "non von Neumann" Programming Language". IEEE Annals of the History of Computing, vol. 19, no. 2, pp.&nbsp;17–24,  April–June, 1997. [http://doi.ieeecomputersociety.org/10.1109/85.586068 (abstract)] However, it was not implemented in his time, and his original contributions were (due to World War II) largely isolated from other developments, although it influenced Heinz Rutishauser's language "Superplan" (and to some degree also Algol). The first really widespread high-level language was Fortran, a machine independent development of IBM's earlier Autocode systems. ALGOL|Algol, defined in 1958 and 1960, by committees of European and American computer scientists, introduced recursion as well as nested functions under lexical scope. It was also the first language with a clear distinction between call by value|value and call by name|name-parameters and their corresponding semantics.Although it lacked a notion of call by reference|reference-parameters, which could be a problem in some situations. Several successors, including AlgolW, Algol68, Simula, Pascal (programming language)|Pascal, Modula and Ada (programming language)|Ada therefore included reference-parameters (The related C-language family instead allowed addresses as '''value'''-parameters). Algol also introduced several structured programming concepts, such as the '''while-do''' and '''if-then-else''' constructs and its syntax was the first to be described by a formal method, Backus–Naur form (BNF). During roughly the same period Cobol introduced record (computer science)|records (also called structs) and Lisp (programming language)|Lisp introduced a fully general lambda abstraction in a programming language for the first time.

== Features ==
"High-level language" refers to the higher level of abstraction from machine language. Rather than dealing with registers, memory addresses and call stacks, high-level languages deal with variables, arrays, object (computer science)|objects, complex arithmetic or boolean expressions, subroutines and functions, loops, Thread (computer science)|threads, locks, and other abstract computer science concepts, with a focus on usability over optimal program efficiency. Unlike low-level assembly languages, high-level languages have few, if any, language elements that translate directly into a machine's native opcodes. Other features, such as string handling routines, object-oriented language features, and file input/output, may also be present.

== Abstraction penalty ==
High-level languages intend to provide features which standardize common tasks, permit rich debugging, and maintain architectural agnosticism; while low-level languages often produce more efficient code through optimization for a specific system architecture. ''Abstraction penalty'' is the border that prevents high-level programming techniques from being applied in situations where computational limitations, standards conformance or physical constraints require access to low-level architectural resources (fi, response time(s), hardware integration). High-level programming exhibits features like more generic data structures/operations, run-time interpretation, and intermediate code files; which often result in execution of far more operations than necessary, higher memory consumption, and larger binary program size.{{cite journal
 |author=Surana P 
 |title=Meta-Compilation of Language Abstractions. 
 |year=2006 
 |url=ftp://lispnyc.org/meeting-assets/2007-02-13_pinku/SuranaThesis.pdf 
 |format=PDF 
 |accessdate=2008-03-17 
 |deadurl=yes 
 |archiveurl=https://web.archive.org/web/20150217154926/http://lispnyc.org/meeting-assets/2007-02-13_pinku/SuranaThesis.pdf 
 |archivedate=2015-02-17 
 |df= 
}}{{cite web
  | last = Kuketayev
  | title = The Data Abstraction Penalty (DAP) Benchmark for Small Objects in Java.
  | url= http://www.adtmag.com/joop/article.aspx?id=4597
  | accessdate = 2008-03-17 }}{{Cite book
  | last = Chatzigeorgiou
  | last2 = Stephanides
  | editor-last = Blieberger
  | editor2-last = Strohmeier
  | contribution = Evaluating Performance and Power Of Object-Oriented Vs. Procedural Programming Languages
  | title = Proceedings - 7th International Conference on Reliable Software Technologies - Ada-Europe'2002
  | year = 2002
  | pages = 367
  | publisher = Springer
  | postscript = <!--None-->
 }} For this reason, code which needs to run particularly quickly and efficiently may require the use of a lower-level language, even if a higher-level language would make the coding easier. In many cases, critical portions of a program mostly in a high-level language can be hand-coded in assembly language, leading to a much faster, more efficient, or simply reliably functioning Program optimisation|optimised program.

However, with the growing complexity of modern microprocessor architectures, well-designed compilers for high-level languages frequently produce code comparable in efficiency to what most low-level programmers can produce by hand, and the higher abstraction may allow for more powerful techniques providing better overall results than their low-level counterparts in particular settings.
{{Cite journal
  |author1=Manuel Carro |author2=José F. Morales |author3=Henk L. Muller |author4=G. Puebla |author5=M. Hermenegildo | journal = Proceedings of the 2006 international conference on Compilers, architecture and synthesis for embedded systems
  | title = High-level languages for small devices: a case study
  | url = http://www.clip.dia.fi.upm.es/papers/carro06:stream_interpreter_cases.pdf
  | format = PDF
  | year = 2006
  | publisher = ACM
  | postscript = <!--None-->
}}
High-level languages are designed independent of a specific computing system architecture. This facilitates executing a program written in such a language on any computing system with compatible support for the Interpreted or Just-in-time compilation|JIT program. High-level languages can be improved as their designers develop improvements. In other cases, new high-level languages evolve from one or more others with the goal of aggregating the most popular constructs with new or improved features. An example of this is Scala (programming language)|Scala which maintains backward compatibility with Java (programming language)|Java which means that programs and libraries written in Java will continue to be usable even if a programming shop switches to Scala; this makes the transition easier and the lifespan of such high-level coding indefinite. In contrast, low-level programs rarely survive beyond the system architecture which they were written for without major revision. This is the engineering 'trade-off' for the 'Abstraction Penalty'.

== Relative meaning ==
Examples of high-level programming languages in active use today include Python (programming language)|Python, Visual Basic, Delphi (programming language)|Delphi, Perl, PHP, ECMAScript, Ruby (programming language)|Ruby and many others.

The terms ''high-level'' and ''low-level'' are inherently relative. Some decades ago, the C (programming language)|C language, and similar languages, were most often considered "high-level", as it supported concepts such as expression evaluation, parameterised recursive functions, and data types and structures, while assembly language was considered "low-level".  Today, many programmers might refer to C as low-level, as it lacks a large Run time system|runtime-system (no garbage collection, etc.), basically supports only scalar operations, and provides direct memory addressing. It, therefore, readily blends with assembly language and the machine level of CPUs and microcontrollers.

Assembly language may itself be regarded as a higher level (but often still one-to-one if used without Macro (computer science)|macros) representation of machine code, as it supports concepts such as constants and (limited) expressions, sometimes even variables, procedures, and data structures. Machine code, in its turn, is inherently at a slightly higher level than the microcode or micro-operations used internally in many processors.

== Execution modes ==
There are three general modes of execution for modern high-level languages:
; Interpreted : When code written in a language is interpreted language|interpreted, its syntax is read and then executed directly, with no compilation stage. A program called an ''interpreter'' reads each program statement, following the program flow, then decides what to do, and does it. A hybrid of an interpreter and a compiler will compile the statement into machine code and execute that; the machine code is then discarded, to be interpreted anew if the line is executed again. Interpreters are commonly the simplest implementations of the behavior of a language, compared to the other two variants listed here.
; Compiled : When code written in a language is Compiled language|compiled, its syntax is transformed into an executable form before running. There are two types of compilation:
:; Machine code generation : Some compilers compile source code directly into machine code. This is the original mode of compilation, and languages that are directly and completely transformed to machine-native code in this way may be called "truly compiled" languages. See assembly language.
:; Intermediate representations : When code written in a language is compiled to an intermediate representation, that representation can be optimized or saved for later execution without the need to re-read the source file. When the intermediate representation is saved, it may be in a form such as byte code. The intermediate representation must then be interpreted or further compiled to execute it. Virtual machines that execute byte code directly or transform it further into machine code have blurred the once clear distinction between intermediate representations and truly compiled languages.
; Source-to-Source Translated or Trans-compiled: Code written in a language may be translated into terms of a lower-level programming language for which native code compilers are already widely available. JavaScript and the C (programming language)|C programming language are common targets for such translators. See CoffeeScript, Chicken Scheme, and Eiffel (programming language)|Eiffel as examples. Specifically, the generated C and C++ code can be seen (as generated from the Eiffel programming language when using the EiffelStudio IDE) in the EIFGENs directory of any compiled Eiffel project. In Eiffel, the "Translated" process is referred to as Trans-compiling or Trans-compiled, and the Eiffel compiler as a Source-to-source compiler|Transcompiler.

Note that languages are not strictly "interpreted" languages or "compiled" languages. Rather, implementations of language behavior use interpretation or compilation. For example, Algol 60 and Fortran have both been interpreted (even though they were more typically compiled). Similarly, Java shows the difficulty of trying to apply these labels to languages, rather than to implementations; Java is compiled to bytecode and the bytecode is subsequently executed by either interpretation (in a Java Virtual Machine|JVM) or compilation (typically with a just-in-time compiler such as HotSpot, again in a JVM). Moreover, compilation, trans-compiling, and interpretation are not strictly limited to just a description of the compiler artifact (binary executable or IL assembly).

===High-level language computer architecture===

Alternatively, it is possible for a high-level language to be directly implemented by a computer – the computer directly executes the HLL code. This is known as a ''high-level language computer architecture'' – the computer architecture itself is designed to be targeted by a specific high-level language.

== See also ==
{{Portal|Computer programming}}
 Abstraction (computer science)
 Generational list of programming languages
 Low-level programming languages
 High-level assembler
 Very high-level programming languages
 Categorical list of programming languages
{{Clear}}

== References ==
{{Reflist}}

== External links ==
 http://c2.com/cgi/wiki?HighLevelLanguage - The WikiWikiWeb's article on high-level programming languages

{{Programming language}}

{{Authority control}}

{{DEFAULTSORT:High-Level Programming Language}}
Category:Programming language classification

